// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2019 16:00:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          HardFuzzyCtl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module HardFuzzyCtl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clearError;
reg clk;
reg [1:0] ctlSave;
reg [9:0] dev1;
reg [9:0] dev2;
reg [9:0] dev3;
reg [9:0] dev4;
reg [9:0] dev5;
// wires                                               
wire [6:0] OutBus;
wire [6:0] OutErrorBus;

// assign statements (if any)                          
HardFuzzyCtl i1 (
// port map - connection between master ports and signals/registers   
	.OutBus(OutBus),
	.OutErrorBus(OutErrorBus),
	.clearError(clearError),
	.clk(clk),
	.ctlSave(ctlSave),
	.dev1(dev1),
	.dev2(dev2),
	.dev3(dev3),
	.dev4(dev4),
	.dev5(dev5)
);
initial 
begin 
#40000000 $finish;
end 

// clearError
initial
begin
	clearError = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// ctlSave[ 1 ]
initial
begin
	ctlSave[1] = 1'b0;
end 
// ctlSave[ 0 ]
initial
begin
	ctlSave[0] = 1'b0;
end 
// dev1[ 9 ]
initial
begin
	dev1[9] = 1'b0;
	dev1[9] = #33280000 1'b1;
end 
// dev1[ 8 ]
initial
begin
	dev1[8] = 1'b0;
	dev1[8] = #33280000 1'b1;
end 
// dev1[ 7 ]
initial
begin
	dev1[7] = 1'b0;
	dev1[7] = #33280000 1'b1;
end 
// dev1[ 6 ]
initial
begin
	dev1[6] = 1'b0;
	dev1[6] = #33280000 1'b1;
end 
// dev1[ 5 ]
initial
begin
	dev1[5] = 1'b0;
	dev1[5] = #33280000 1'b1;
end 
// dev1[ 4 ]
initial
begin
	dev1[4] = 1'b0;
	dev1[4] = #9600000 1'b1;
	dev1[4] = #1280000 1'b0;
	dev1[4] = #22400000 1'b1;
end 
// dev1[ 3 ]
initial
begin
	dev1[3] = 1'b0;
	dev1[3] = #640000 1'b1;
	dev1[3] = #3200000 1'b0;
	dev1[3] = #5760000 1'b1;
	dev1[3] = #1280000 1'b0;
	dev1[3] = #22400000 1'b1;
end 
// dev1[ 2 ]
initial
begin
	dev1[2] = 1'b0;
	dev1[2] = #640000 1'b1;
	dev1[2] = #3200000 1'b0;
	dev1[2] = #2560000 1'b1;
	dev1[2] = #1280000 1'b0;
	dev1[2] = #1920000 1'b1;
	dev1[2] = #1280000 1'b0;
	dev1[2] = #22400000 1'b1;
end 
// dev1[ 1 ]
initial
begin
	dev1[1] = 1'b0;
	dev1[1] = #640000 1'b1;
	dev1[1] = #3200000 1'b0;
	dev1[1] = #5760000 1'b1;
	dev1[1] = #1280000 1'b0;
	dev1[1] = #22400000 1'b1;
end 
// dev1[ 0 ]
initial
begin
	dev1[0] = 1'b0;
	dev1[0] = #640000 1'b1;
	dev1[0] = #3200000 1'b0;
	dev1[0] = #5760000 1'b1;
	dev1[0] = #1280000 1'b0;
	dev1[0] = #22400000 1'b1;
end 
// dev2[ 9 ]
initial
begin
	dev2[9] = 1'b0;
end 
// dev2[ 8 ]
initial
begin
	dev2[8] = 1'b0;
end 
// dev2[ 7 ]
initial
begin
	dev2[7] = 1'b0;
	dev2[7] = #640000 1'b1;
	dev2[7] = #1920000 1'b0;
end 
// dev2[ 6 ]
initial
begin
	dev2[6] = 1'b0;
	dev2[6] = #640000 1'b1;
	dev2[6] = #1920000 1'b0;
	dev2[6] = #26240000 1'b1;
	dev2[6] = #3840000 1'b0;
end 
// dev2[ 5 ]
initial
begin
	dev2[5] = 1'b0;
	dev2[5] = #28800000 1'b1;
	dev2[5] = #3840000 1'b0;
end 
// dev2[ 4 ]
initial
begin
	dev2[4] = 1'b0;
	dev2[4] = #8960000 1'b1;
	dev2[4] = #1280000 1'b0;
	dev2[4] = #18560000 1'b1;
	dev2[4] = #3840000 1'b0;
end 
// dev2[ 3 ]
initial
begin
	dev2[3] = 1'b0;
	dev2[3] = #8960000 1'b1;
	dev2[3] = #1280000 1'b0;
	dev2[3] = #640000 1'b1;
	dev2[3] = #16640000 1'b0;
	dev2[3] = #1280000 1'b1;
	dev2[3] = #3840000 1'b0;
end 
// dev2[ 2 ]
initial
begin
	dev2[2] = 1'b0;
	dev2[2] = #640000 1'b1;
	dev2[2] = #1920000 1'b0;
	dev2[2] = #6400000 1'b1;
	dev2[2] = #1280000 1'b0;
	dev2[2] = #640000 1'b1;
	dev2[2] = #16640000 1'b0;
	dev2[2] = #1280000 1'b1;
	dev2[2] = #3840000 1'b0;
end 
// dev2[ 1 ]
initial
begin
	dev2[1] = 1'b0;
	dev2[1] = #640000 1'b1;
	dev2[1] = #1920000 1'b0;
	dev2[1] = #1920000 1'b1;
	dev2[1] = #3200000 1'b0;
	dev2[1] = #1280000 1'b1;
	dev2[1] = #1280000 1'b0;
	dev2[1] = #640000 1'b1;
	dev2[1] = #16640000 1'b0;
	dev2[1] = #1280000 1'b1;
	dev2[1] = #3840000 1'b0;
end 
// dev2[ 0 ]
initial
begin
	dev2[0] = 1'b0;
	dev2[0] = #640000 1'b1;
	dev2[0] = #1920000 1'b0;
	dev2[0] = #1920000 1'b1;
	dev2[0] = #3200000 1'b0;
	dev2[0] = #1280000 1'b1;
	dev2[0] = #1280000 1'b0;
	dev2[0] = #640000 1'b1;
	dev2[0] = #16640000 1'b0;
	dev2[0] = #1280000 1'b1;
	dev2[0] = #3840000 1'b0;
end 
// dev3[ 9 ]
initial
begin
	dev3[9] = 1'b0;
end 
// dev3[ 8 ]
initial
begin
	dev3[8] = 1'b0;
end 
// dev3[ 7 ]
initial
begin
	dev3[7] = 1'b0;
end 
// dev3[ 6 ]
initial
begin
	dev3[6] = 1'b0;
end 
// dev3[ 5 ]
initial
begin
	dev3[5] = 1'b0;
end 
// dev3[ 4 ]
initial
begin
	dev3[4] = 1'b0;
	dev3[4] = #10240000 1'b1;
	dev3[4] = #5120000 1'b0;
end 
// dev3[ 3 ]
initial
begin
	dev3[3] = 1'b0;
	dev3[3] = #10240000 1'b1;
	dev3[3] = #5120000 1'b0;
end 
// dev3[ 2 ]
initial
begin
	dev3[2] = 1'b1;
	dev3[2] = #25600000 1'b0;
	dev3[2] = #1280000 1'b1;
	dev3[2] = #3200000 1'b0;
	dev3[2] = #6400000 1'b1;
end 
// dev3[ 1 ]
initial
begin
	dev3[1] = 1'b1;
	dev3[1] = #25600000 1'b0;
	dev3[1] = #1280000 1'b1;
	dev3[1] = #3200000 1'b0;
	dev3[1] = #6400000 1'b1;
end 
// dev3[ 0 ]
initial
begin
	dev3[0] = 1'b0;
	dev3[0] = #10240000 1'b1;
	dev3[0] = #5120000 1'b0;
	dev3[0] = #9600000 1'b1;
	dev3[0] = #2560000 1'b0;
end 
// dev4[ 9 ]
initial
begin
	dev4[9] = 1'b0;
end 
// dev4[ 8 ]
initial
begin
	dev4[8] = 1'b0;
end 
// dev4[ 7 ]
initial
begin
	dev4[7] = 1'b0;
end 
// dev4[ 6 ]
initial
begin
	dev4[6] = 1'b0;
end 
// dev4[ 5 ]
initial
begin
	dev4[5] = 1'b0;
end 
// dev4[ 4 ]
initial
begin
	dev4[4] = 1'b0;
end 
// dev4[ 3 ]
initial
begin
	dev4[3] = 1'b0;
	dev4[3] = #29440000 1'b1;
	dev4[3] = #5760000 1'b0;
end 
// dev4[ 2 ]
initial
begin
	dev4[2] = 1'b0;
	dev4[2] = #14720000 1'b1;
	dev4[2] = #12800000 1'b0;
end 
// dev4[ 1 ]
initial
begin
	dev4[1] = 1'b0;
	dev4[1] = #640000 1'b1;
	dev4[1] = #12160000 1'b0;
	dev4[1] = #16640000 1'b1;
	dev4[1] = #3840000 1'b0;
end 
// dev4[ 0 ]
initial
begin
	dev4[0] = 1'b0;
	dev4[0] = #640000 1'b1;
	dev4[0] = #12160000 1'b0;
	dev4[0] = #3200000 1'b1;
	dev4[0] = #3200000 1'b0;
end 
// dev5[ 9 ]
initial
begin
	dev5[9] = 1'b0;
end 
// dev5[ 8 ]
initial
begin
	dev5[8] = 1'b0;
end 
// dev5[ 7 ]
initial
begin
	dev5[7] = 1'b0;
end 
// dev5[ 6 ]
initial
begin
	dev5[6] = 1'b0;
end 
// dev5[ 5 ]
initial
begin
	dev5[5] = 1'b0;
end 
// dev5[ 4 ]
initial
begin
	dev5[4] = 1'b0;
end 
// dev5[ 3 ]
initial
begin
	dev5[3] = 1'b0;
end 
// dev5[ 2 ]
initial
begin
	dev5[2] = 1'b0;
end 
// dev5[ 1 ]
initial
begin
	dev5[1] = 1'b0;
	dev5[1] = #17920000 1'b1;
end 
// dev5[ 0 ]
initial
begin
	dev5[0] = 1'b1;
end 
endmodule

